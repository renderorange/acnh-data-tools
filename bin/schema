#!/usr/bin/env perl

use strict;
use warnings;

use FindBin ();
use lib "$FindBin::RealBin/../lib";

use Getopt::Long ();
use Pod::Usage   ();
use ACNH::Data::Tools::Config ();
use Try::Tiny;
use JSON::Tiny;
use File::Slurp  ();
use Scalar::Util ();

our $VERSION = '0.001';

my %opt = (
    output => 'json',
);
Getopt::Long::GetOptions(
    \%opt,
    'output=s',
    'version' => sub { print "schema version $VERSION\n"; exit 0 },
    'help',
) or Pod::Usage::pod2usage( -exitval => 1 );

Pod::Usage::pod2usage( -exitval => 0 ) if ( $opt{help} );

$opt{output} = lc $opt{output};
Pod::Usage::pod2usage( -exitval => 1 )
    unless $opt{output} =~ /^json$|^sqlite$/;

my $config = ACNH::Data::Tools::Config->get();

my $data_path = $config->{project_dir} . '/data/';
my $data_json_file = $data_path . 'json/data.json';

unless ( -e $data_json_file && -r $data_json_file ) {
    print "open $data_json_file: doesn't exist or cannot be read\n";
    exit 1;
}

my $json = File::Slurp::read_file( $data_json_file )
    or die "read $data_json_file: " . $@ . "\n";
my $data = JSON::Tiny::decode_json $json;

my $schema = {};
foreach my $table ( keys %{$data} ) {
    $schema->{$table} = {};

    # here we need to figure out what the correct type for each col is.
    # the values of a col aren't consistent and can contain empty string,
    # integer, or different strings to indicate the col doesn't apply for
    # the row.

    foreach my $row ( @{$data->{$table}} ) {
        foreach my $col ( keys %{$row} ) {

            # TODO: this first evaluation may be okay to remove.
            # it was originally added as a failsafe to ensure INTEGER was
            # protected from being overwritten, but have since added better
            # checking before setting TEXT.
            # if we've already set the type to INTEGER, skip evaluating it again.
            if ( exists $schema->{$table}{$col}
                 && $schema->{$table}{$col} eq 'INTEGER' ) {
                next;
            }

            if ( !exists $schema->{$table}{$col} ) {
                # set initial type as TEXT if the value is empty string or NA.
                # we'll correct this later if we evaluate as INTEGER.
                if ( $row->{$col} eq q{} || $row->{$col} eq q{NA} ) {
                    $schema->{$table}{$col} = 'TEXT';
                    next;
                }
                # NFS only applies to INTEGER
                if ( $row->{$col} eq q{NFS} ) {
                    $schema->{$table}{$col} = 'INTEGER';
                    next;
                }
            }

            if ( Scalar::Util::looks_like_number( $row->{$col} ) ) {
                $schema->{$table}{$col} = 'INTEGER';
                next;
            }

            # we don't want to set TEXT for any of the following apart from the initial setting.
            unless ( $row->{$col} eq q{} || $row->{$col} eq q{NA} || $row->{$col} eq q{NFS} ) {
                $schema->{$table}{$col} = 'TEXT';
            }
        }
    }
}

my $schema_path = $config->{project_dir} . '/schema/';
my $schema_file = $schema_path . 'schema.' . $opt{output};

my $schema_output;
if ( $opt{output} eq 'json' ) {
    $schema_output = JSON::Tiny::encode_json $schema;
}
else {
    foreach my $table ( sort keys %{$schema} ) {
        $schema_output .= qq{CREATE TABLE IF NOT EXISTS "$table" (\n} .
                          q{    id INTEGER PRIMARY KEY AUTOINCREMENT};

        foreach my $col ( sort keys %{$schema->{$table}} ) {
            $schema_output .= qq{,\n} .
                              qq{    "$col" } . $schema->{$table}{$col};
        }

        $schema_output .= qq{\n} .
                          qq{);\n};
    }
}

File::Slurp::write_file( $schema_file, { atomic => 1, binmode => ':raw' }, $schema_output )
    or die "write $schema_file: " . $@ . "\n";

exit 0;

__END__

=pod

=head1 NAME

schema - script to read and create db schemas for ACNH

=head1 SYNOPSIS

 schema [--output <json|sqlite>]
        [--version] [--help]

=head1 DESCRIPTION

C<schema> is a program to read and create db schemas from the ACNH data.json.

By default, C<schema> will output an agnostic version in C<json> to C<schema/schema.json>.

C<schema> also supports optional output to C<sqlite>.

=head1 OPTIONS

=over

=item --output

Specify the output.

Defaults to C<json>, also accepts C<sqlite>.

=item --version

Print the version.

=item --help

Print the help menu.

=back

=head1 AUTHOR

Blaine Motsinger C<blaine@renderorange.com>

=cut
